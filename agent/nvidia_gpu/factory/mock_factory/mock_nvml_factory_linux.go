// Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/agent/nvidia_gpu/factory (interfaces: NVMLFactory)

// Package mock_factory is a generated GoMock package.
package mock_factory

import (
	reflect "reflect"

	nvml "github.com/NVIDIA/gpu-monitoring-tools/bindings/go/nvml"
	gomock "github.com/golang/mock/gomock"
)

// MockNVMLFactory is a mock of NVMLFactory interface
type MockNVMLFactory struct {
	ctrl     *gomock.Controller
	recorder *MockNVMLFactoryMockRecorder
}

// MockNVMLFactoryMockRecorder is the mock recorder for MockNVMLFactory
type MockNVMLFactoryMockRecorder struct {
	mock *MockNVMLFactory
}

// NewMockNVMLFactory creates a new mock instance
func NewMockNVMLFactory(ctrl *gomock.Controller) *MockNVMLFactory {
	mock := &MockNVMLFactory{ctrl: ctrl}
	mock.recorder = &MockNVMLFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNVMLFactory) EXPECT() *MockNVMLFactoryMockRecorder {
	return m.recorder
}

// GetDeviceCount mocks base method
func (m *MockNVMLFactory) GetDeviceCount() (uint, error) {
	ret := m.ctrl.Call(m, "GetDeviceCount")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceCount indicates an expected call of GetDeviceCount
func (mr *MockNVMLFactoryMockRecorder) GetDeviceCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCount", reflect.TypeOf((*MockNVMLFactory)(nil).GetDeviceCount))
}

// Init mocks base method
func (m *MockNVMLFactory) Init() error {
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockNVMLFactoryMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockNVMLFactory)(nil).Init))
}

// NewDeviceLite mocks base method
func (m *MockNVMLFactory) NewDeviceLite(arg0 uint) (*nvml.Device, error) {
	ret := m.ctrl.Call(m, "NewDeviceLite", arg0)
	ret0, _ := ret[0].(*nvml.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDeviceLite indicates an expected call of NewDeviceLite
func (mr *MockNVMLFactoryMockRecorder) NewDeviceLite(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDeviceLite", reflect.TypeOf((*MockNVMLFactory)(nil).NewDeviceLite), arg0)
}

// Shutdown mocks base method
func (m *MockNVMLFactory) Shutdown() error {
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockNVMLFactoryMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockNVMLFactory)(nil).Shutdown))
}
