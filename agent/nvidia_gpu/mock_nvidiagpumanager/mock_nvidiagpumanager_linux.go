// Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/agent/nvidia_gpu (interfaces: NvidiaGPUManager)

// Package mock_nvidia_gpu is a generated GoMock package.
package mock_nvidia_gpu

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNvidiaGPUManager is a mock of NvidiaGPUManager interface
type MockNvidiaGPUManager struct {
	ctrl     *gomock.Controller
	recorder *MockNvidiaGPUManagerMockRecorder
}

// MockNvidiaGPUManagerMockRecorder is the mock recorder for MockNvidiaGPUManager
type MockNvidiaGPUManagerMockRecorder struct {
	mock *MockNvidiaGPUManager
}

// NewMockNvidiaGPUManager creates a new mock instance
func NewMockNvidiaGPUManager(ctrl *gomock.Controller) *MockNvidiaGPUManager {
	mock := &MockNvidiaGPUManager{ctrl: ctrl}
	mock.recorder = &MockNvidiaGPUManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNvidiaGPUManager) EXPECT() *MockNvidiaGPUManagerMockRecorder {
	return m.recorder
}

// GetGPUDeviceIDs mocks base method
func (m *MockNvidiaGPUManager) GetGPUDeviceIDs() ([]string, error) {
	ret := m.ctrl.Call(m, "GetGPUDeviceIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGPUDeviceIDs indicates an expected call of GetGPUDeviceIDs
func (mr *MockNvidiaGPUManagerMockRecorder) GetGPUDeviceIDs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGPUDeviceIDs", reflect.TypeOf((*MockNvidiaGPUManager)(nil).GetGPUDeviceIDs))
}

// GetGPUDeviceModels mocks base method
func (m *MockNvidiaGPUManager) GetGPUDeviceModels() ([]string, error) {
	ret := m.ctrl.Call(m, "GetGPUDeviceModels")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGPUDeviceModels indicates an expected call of GetGPUDeviceModels
func (mr *MockNvidiaGPUManagerMockRecorder) GetGPUDeviceModels() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGPUDeviceModels", reflect.TypeOf((*MockNvidiaGPUManager)(nil).GetGPUDeviceModels))
}

// Initialize mocks base method
func (m *MockNvidiaGPUManager) Initialize() error {
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockNvidiaGPUManagerMockRecorder) Initialize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockNvidiaGPUManager)(nil).Initialize))
}

// Shutdown mocks base method
func (m *MockNvidiaGPUManager) Shutdown() error {
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockNvidiaGPUManagerMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockNvidiaGPUManager)(nil).Shutdown))
}
