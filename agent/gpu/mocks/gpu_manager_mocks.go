// Copyright 2015-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/amazon-ecs-agent/agent/gpu (interfaces: GPUManager)

// Package mock_gpu is a generated GoMock package.
package mock_gpu

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGPUManager is a mock of GPUManager interface
type MockGPUManager struct {
	ctrl     *gomock.Controller
	recorder *MockGPUManagerMockRecorder
}

// MockGPUManagerMockRecorder is the mock recorder for MockGPUManager
type MockGPUManagerMockRecorder struct {
	mock *MockGPUManager
}

// NewMockGPUManager creates a new mock instance
func NewMockGPUManager(ctrl *gomock.Controller) *MockGPUManager {
	mock := &MockGPUManager{ctrl: ctrl}
	mock.recorder = &MockGPUManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGPUManager) EXPECT() *MockGPUManagerMockRecorder {
	return m.recorder
}

// GetDriverVersion mocks base method
func (m *MockGPUManager) GetDriverVersion() string {
	ret := m.ctrl.Call(m, "GetDriverVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDriverVersion indicates an expected call of GetDriverVersion
func (mr *MockGPUManagerMockRecorder) GetDriverVersion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverVersion", reflect.TypeOf((*MockGPUManager)(nil).GetDriverVersion))
}

// GetGPUIDs mocks base method
func (m *MockGPUManager) GetGPUIDs() []string {
	ret := m.ctrl.Call(m, "GetGPUIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetGPUIDs indicates an expected call of GetGPUIDs
func (mr *MockGPUManagerMockRecorder) GetGPUIDs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGPUIDs", reflect.TypeOf((*MockGPUManager)(nil).GetGPUIDs))
}

// GetRuntimeVersion mocks base method
func (m *MockGPUManager) GetRuntimeVersion() string {
	ret := m.ctrl.Call(m, "GetRuntimeVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRuntimeVersion indicates an expected call of GetRuntimeVersion
func (mr *MockGPUManagerMockRecorder) GetRuntimeVersion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeVersion", reflect.TypeOf((*MockGPUManager)(nil).GetRuntimeVersion))
}

// Initialize mocks base method
func (m *MockGPUManager) Initialize() error {
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockGPUManagerMockRecorder) Initialize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockGPUManager)(nil).Initialize))
}

// SetDriverVersion mocks base method
func (m *MockGPUManager) SetDriverVersion(arg0 string) {
	m.ctrl.Call(m, "SetDriverVersion", arg0)
}

// SetDriverVersion indicates an expected call of SetDriverVersion
func (mr *MockGPUManagerMockRecorder) SetDriverVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDriverVersion", reflect.TypeOf((*MockGPUManager)(nil).SetDriverVersion), arg0)
}

// SetGPUIDs mocks base method
func (m *MockGPUManager) SetGPUIDs(arg0 []string) {
	m.ctrl.Call(m, "SetGPUIDs", arg0)
}

// SetGPUIDs indicates an expected call of SetGPUIDs
func (mr *MockGPUManagerMockRecorder) SetGPUIDs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGPUIDs", reflect.TypeOf((*MockGPUManager)(nil).SetGPUIDs), arg0)
}

// SetRuntimeVersion mocks base method
func (m *MockGPUManager) SetRuntimeVersion(arg0 string) {
	m.ctrl.Call(m, "SetRuntimeVersion", arg0)
}

// SetRuntimeVersion indicates an expected call of SetRuntimeVersion
func (mr *MockGPUManagerMockRecorder) SetRuntimeVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRuntimeVersion", reflect.TypeOf((*MockGPUManager)(nil).SetRuntimeVersion), arg0)
}
